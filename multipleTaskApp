/*
***********************************************************************************************
* INCLUDE FILES
***********************************************************************************************
*/
#include <app_cfg.h>
#include <bsp.h>
#include <os.h>
/*
***********************************************************************************************
* LOCAL GLOBAL VARIABLES
***********************************************************************************************
*/
static OS_TCB AppTaskStartTCB; (1)
static OS_TCB AppTask1_TCB;
static OS_TCB AppTask2_TCB;
static OS_MUTEX AppMutex; (2)
static OS_Q AppQ; (3)
static CPU_STK AppTaskStartStk[APP_TASK_START_STK_SIZE]; (4)
static CPU_STK AppTask1_Stk[128];
static CPU_STK AppTask2_Stk[128];
/*
***********************************************************************************************
* FUNCTION PROTOTYPES
***********************************************************************************************
*/
static void AppTaskStart (void *p_arg); (5)
static void AppTask1 (void *p_arg);
static void AppTask2 (void *p_arg);

void main (void)
{
	OS_ERR err;
	BSP_IntDisAll();
	OSInit(&err);
	/* Check for ‘err’ */
	OSMutexCreate((OS_MUTEX *)&AppMutex, (1)
				(CPU_CHAR *)”My App. Mutex”,
				(OS_ERR *)&err);
				
	/* Check for ‘err’ */
	OSQCreate ((OS_Q *)&AppQ, (2)
				(CPU_CHAR *)”My App Queue”,
				(OS_MSG_QTY )10,
				(OS_ERR *)&err);
				
	/* Check for ‘err’ */
	OSTaskCreate((OS_TCB *)&AppTaskStartTCB, (3)
				(CPU_CHAR *)”App Task Start”,
				(OS_TASK_PTR )AppTaskStart,
				(void *)0,
				(OS_PRIO )APP_TASK_START_PRIO,
				(CPU_STK *)&AppTaskStartStk[0],
				(CPU_STK_SIZE)APP_TASK_START_STK_SIZE / 10,
				(CPU_STK_SIZE)APP_TASK_START_STK_SIZE,
				(OS_MSG_QTY )0,
				(OS_TICK )0,
				(void *)0,
				(OS_OPT )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
				(OS_ERR *)&err);
	
	/* Check for ‘err’ */
	OSStart(&err);
	/* Check for ‘err’ */
}


static void AppTaskStart (void *p_arg)
{
	OS_ERR err;
	p_arg = p_arg;
	BSP_Init();
	CPU_Init();
	BSP_OS_TickInit();
	OSTaskCreate((OS_TCB *)&AppTask1_TCB, (1)
		(CPU_CHAR *)”App Task 1”,
		(OS_TASK_PTR )AppTask1,
		(void *)0,
		(OS_PRIO )5,
		(CPU_STK *)&AppTask1_Stk[0],
		(CPU_STK_SIZE)0,
		(CPU_STK_SIZE)128,
		(OS_MSG_QTY )0,
		(OS_TICK )0,
		(void *)0,
		(OS_OPT )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
		(OS_ERR *)&err);
	
	OSTaskCreate((OS_TCB *)&AppTask2_TCB, (2)
		(CPU_CHAR *)”App Task 2”,
		(OS_TASK_PTR )AppTask2,
		(void *)0,
		(OS_PRIO )6,
		(CPU_STK *)&AppTask2_Stk[0],
		(CPU_STK_SIZE)0,
		(CPU_STK_SIZE)128,
		(OS_MSG_QTY )0,
		(OS_TICK )0,
		(void *)0,
		(OS_OPT )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
		(OS_ERR *)&err);
	
	BSP_LED_Off(0);
	while (1) {
		BSP_LED_Toggle(0);
		OSTimeDlyHMSM((CPU_INT16U) 0,
		(CPU_INT16U) 0,
		(CPU_INT16U) 0,
		(CPU_INT32U)100,
		(OS_OPT )OS_OPT_TIME_HMSM_STRICT,
		(OS_ERR *)&err);
	}
}

static void AppTask1 (void *p_arg)
{
	OS_ERR err;
	CPU_TS ts;
	p_arg = p_arg;
	
	while (1) {
		OSTimeDly ((OS_TICK )1, (1)
				(OS_OPT )OS_OPT_TIME_DLY,
				(OS_ERR *)&err);
				
		OSQPost ((OS_Q *)&AppQ, (2)
				(void *)1;
				(OS_MSG_SIZE)sizeof(void *),
				(OS_OPT )OS_OPT_POST_FIFO,
				(OS_ERR *)&err);
			
		OSMutexPend((OS_MUTEX *)&AppMutex, (3)
				(OS_TICK )0,
				(OS_OPT )OS_OPT_PEND_BLOCKING;
				(CPU_TS *)&ts,
				(OS_ERR *)&err);
				
		/* Access shared resource */ (4)
		OSMutexPost((OS_MUTEX *)&AppMutex, (5)
					(OS_OPT )OS_OPT_POST_NONE,
					(OS_ERR *)&err);
	}
}

static void AppTask2 (void *p_arg)
{
	OS_ERR err;
	void *p_msg;
	OS_MSG_SIZE msg_size;
	CPU_TS ts;
	CPU_TS ts_delta;
	p_arg = p_arg;
	while (1) {
		p_msg = OSQPend((OS_Q *)&AppQ, (1)
						(OS_MSG_SIZE *)&msg_size,
						(OS_TICK )0,
						(OS_OPT )OS_OPT_PEND_BLOCKING,
						(CPU_TS *)&ts,
						(OS_ERR *)&err);
		ts_delta = OS_TS_GET() – ts; (2)
		/* Process message received */ (3)
	}
}
